//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by FastGenericNew.SourceGenerator
//     Please do not modify this file directly
// <auto-generated/>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Reflection.Emit;
using System.ComponentModel;

namespace @FastGenericNew
{
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T>
    {
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, Type.EmptyTypes, null);

#if NETFRAMEWORK
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly bool _isValueTypeT = typeof(T).IsValueType;
#endif

	    public static readonly Func<T> CompiledDelegate;
    
        public static readonly bool IsValid = typeof(T).IsValueType || (global::@FastGenericNew.FastNew<T>.CachedConstructor != null && !typeof(T).IsAbstract);
    
        static FastNew()
        {
            var dm = new DynamicMethod("", typeof(T), global::@FastGenericNew._FastNewDynMetClosure.InstanceOnlyArray, restrictedSkipVisibility: true);
            var il = dm.GetILGenerator();
            if (IsValid)
            {
                if (global::@FastGenericNew.FastNew<T>.CachedConstructor != null)
                    il.Emit(OpCodes.Newobj, CachedConstructor!);
                else
                {
                    il.DeclareLocal(typeof(T));
                    //il.Emit(OpCodes.Ldloca_S, (short)0)
                    //il.Emit(OpCodes.Initobj, typeof(T));
                    il.Emit(OpCodes.Ldloc_0);
                }
            }
            else
            {
                il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
            }
            il.Emit(OpCodes.Ret);
            CompiledDelegate = (Func<T>)dm.CreateDelegate(typeof(Func<T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
        }
    }
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
		}, null);
		public static readonly Func<TArg0, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(10);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, T>)dm.CreateDelegate(typeof(Func<TArg0, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
		}, null);
		public static readonly Func<TArg0, TArg1, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(11);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(12);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(13);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(14);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(15);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(16);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(17);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(18);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
			typeof(TArg9),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8), typeof(TArg9) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(19);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Ldarg_S, (byte)10);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
			typeof(TArg9),
			typeof(TArg10),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8), typeof(TArg9), typeof(TArg10) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(20);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Ldarg_S, (byte)10);
				il.Emit(OpCodes.Ldarg_S, (byte)11);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
			typeof(TArg9),
			typeof(TArg10),
			typeof(TArg11),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8), typeof(TArg9), typeof(TArg10), typeof(TArg11) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(21);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Ldarg_S, (byte)10);
				il.Emit(OpCodes.Ldarg_S, (byte)11);
				il.Emit(OpCodes.Ldarg_S, (byte)12);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
			typeof(TArg9),
			typeof(TArg10),
			typeof(TArg11),
			typeof(TArg12),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8), typeof(TArg9), typeof(TArg10), typeof(TArg11), typeof(TArg12) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(22);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Ldarg_S, (byte)10);
				il.Emit(OpCodes.Ldarg_S, (byte)11);
				il.Emit(OpCodes.Ldarg_S, (byte)12);
				il.Emit(OpCodes.Ldarg_S, (byte)13);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
			typeof(TArg9),
			typeof(TArg10),
			typeof(TArg11),
			typeof(TArg12),
			typeof(TArg13),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8), typeof(TArg9), typeof(TArg10), typeof(TArg11), typeof(TArg12), typeof(TArg13) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(23);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Ldarg_S, (byte)10);
				il.Emit(OpCodes.Ldarg_S, (byte)11);
				il.Emit(OpCodes.Ldarg_S, (byte)12);
				il.Emit(OpCodes.Ldarg_S, (byte)13);
				il.Emit(OpCodes.Ldarg_S, (byte)14);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
			typeof(TArg9),
			typeof(TArg10),
			typeof(TArg11),
			typeof(TArg12),
			typeof(TArg13),
			typeof(TArg14),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8), typeof(TArg9), typeof(TArg10), typeof(TArg11), typeof(TArg12), typeof(TArg13), typeof(TArg14) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(24);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Ldarg_S, (byte)10);
				il.Emit(OpCodes.Ldarg_S, (byte)11);
				il.Emit(OpCodes.Ldarg_S, (byte)12);
				il.Emit(OpCodes.Ldarg_S, (byte)13);
				il.Emit(OpCodes.Ldarg_S, (byte)14);
				il.Emit(OpCodes.Ldarg_S, (byte)15);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
	internal static partial class FastNew<
#if NET5_0_OR_GREATER
[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)]
#endif
T, TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>
	{
		/// <summary>
		/// The constructor of <typeparamref name="T" /> with given arguments. <br/>
		/// Could be <see langword="null" /> if the constructor couldn't be found.
		/// </summary>
		public static readonly ConstructorInfo? CachedConstructor = typeof(T).GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, null, new Type[]
		{
			typeof(TArg0),
			typeof(TArg1),
			typeof(TArg2),
			typeof(TArg3),
			typeof(TArg4),
			typeof(TArg5),
			typeof(TArg6),
			typeof(TArg7),
			typeof(TArg8),
			typeof(TArg9),
			typeof(TArg10),
			typeof(TArg11),
			typeof(TArg12),
			typeof(TArg13),
			typeof(TArg14),
			typeof(TArg15),
		}, null);
		public static readonly Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, T> CompiledDelegate;

		public static readonly bool IsValid;

		static FastNew()
		{
			IsValid = CachedConstructor != null && !typeof(T).IsAbstract;
			var dm = new DynamicMethod("", typeof(T), new Type[] { typeof(global::@FastGenericNew._FastNewDynMetClosure), typeof(TArg0), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8), typeof(TArg9), typeof(TArg10), typeof(TArg11), typeof(TArg12), typeof(TArg13), typeof(TArg14), typeof(TArg15) }, restrictedSkipVisibility: true);
			var il = dm.GetILGenerator(25);
			if (IsValid)
			{
				il.Emit(OpCodes.Ldarg_1);
				il.Emit(OpCodes.Ldarg_2);
				il.Emit(OpCodes.Ldarg_3);
				il.Emit(OpCodes.Ldarg_S, (byte)4);
				il.Emit(OpCodes.Ldarg_S, (byte)5);
				il.Emit(OpCodes.Ldarg_S, (byte)6);
				il.Emit(OpCodes.Ldarg_S, (byte)7);
				il.Emit(OpCodes.Ldarg_S, (byte)8);
				il.Emit(OpCodes.Ldarg_S, (byte)9);
				il.Emit(OpCodes.Ldarg_S, (byte)10);
				il.Emit(OpCodes.Ldarg_S, (byte)11);
				il.Emit(OpCodes.Ldarg_S, (byte)12);
				il.Emit(OpCodes.Ldarg_S, (byte)13);
				il.Emit(OpCodes.Ldarg_S, (byte)14);
				il.Emit(OpCodes.Ldarg_S, (byte)15);
				il.Emit(OpCodes.Ldarg_S, (byte)16);
				il.Emit(OpCodes.Newobj, CachedConstructor!);
			}
			else
			{
				il.Emit(OpCodes.Call, global::@FastGenericNew.ThrowHelper.GetSmartThrow<T>());
			}
			il.Emit(OpCodes.Ret);
			CompiledDelegate = (Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, T>)dm.CreateDelegate(typeof(Func<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, T>), global::@FastGenericNew._FastNewDynMetClosure.Instance);
		}
	}
}
